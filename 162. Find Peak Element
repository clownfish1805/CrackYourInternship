class Solution {
    public int findPeakElement(int[] nums) {
        //BRUTE FORCE -> O(N)
       /*   int n=nums.length;
        for(int i=0;i<n;i++){
            if((i==0||nums[i]>nums[i-1]) && ( i==n-1||nums[i]>nums[i+1])){
                return i;
            }
        }
        return -1;
        */


         // OOPTIMAL SOL -> O(LOGN)
         
        int n = nums.length;
        int low = 0;
        int high = n - 1;
        
        // edge cases for first and last elements
        if (n == 1) {
            return 0; 
        }
        if (nums[0] > nums[1]) {
            return 0;
        }
        if (nums[n - 1] > nums[n - 2]) {
            return n - 1; 
        }

        while (low <= high) {
            int mid = (low + high) / 2;

            // Check if nums[mid] is a peak element
            if((mid == 0||nums[mid]>nums[mid - 1]) && (mid == n-1||nums[mid]>nums[mid + 1])){
                return mid;
            } 
            else if (mid > 0 && nums[mid] < nums[mid - 1]) {
                high = mid - 1; // Peak is in the left half
            } 
            else {
                low = mid + 1; // Peak is in the right half
            }
        }

        return -1;
    }
}
